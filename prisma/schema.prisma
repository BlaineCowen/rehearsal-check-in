generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  rehearsals    Rehearsal[]     @relation("UserRehearsals")
  organizations Organization[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Organization {
  id         String           @id @default(uuid())
  name       String
  imageUrl   String?
  createdAt  DateTime        @default(now())
  createdBy  User            @relation(fields: [userId], references: [id])
  userId     String
  groups     Group[]
  students   Student[]
  rehearsals RehearsalGroup[]
}

model Group {
  id             String           @id @default(uuid())
  name           String
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  students       Student[]
  rehearsals     RehearsalGroup[]
  createdAt      DateTime         @default(now())
}

model Student {
  id             String       @id @default(uuid())
  studentId      String       @unique
  firstName      String
  lastName       String
  grade          String?
  organizationId String?
  groupId        String?
  createdAt      DateTime     @default(now())
  attendance     Attendance[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  group          Group?       @relation(fields: [groupId], references: [id])
}

model Rehearsal {
  id         String           @id @default(uuid())
  date       DateTime
  userId     String
  createdAt  DateTime         @default(now())
  attendance Attendance[]
  createdBy  User             @relation("UserRehearsals", fields: [userId], references: [id])
  groups     RehearsalGroup[]
}

model RehearsalGroup {
  rehearsalId     String
  groupId         String
  organizationId  String
  group           Group         @relation(fields: [groupId], references: [id])
  rehearsal       Rehearsal     @relation(fields: [rehearsalId], references: [id])
  organization    Organization  @relation(fields: [organizationId], references: [id])

  @@id([rehearsalId, groupId])
}

model Attendance {
  id          String    @id @default(uuid())
  studentId   String
  rehearsalId String
  checkInTime DateTime  @default(now())
  rehearsal   Rehearsal @relation(fields: [rehearsalId], references: [id])
  student     Student   @relation(fields: [studentId], references: [id])

  @@unique([studentId, rehearsalId])
}
